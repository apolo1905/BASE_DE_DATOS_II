from flask import Flask, request, jsonify
import mysql.connector

app = Flask(__name__)

# Configuración de la conexión con MySQL
db_config = {
    'host': 'localhost',
    'user': 'root',     
    'password': '123456789', 
    'database': 'mi_base_de_datos'
}

# Ruta para crear un nuevo usuario (INSERT)
@app.route('/usuarios', methods=['POST'])
def crear_usuario():
    data = request.json
    nombre = data.get('nombre')
    email = data.get('email')
    edad = data.get('edad')

    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO usuarios (nombre, email, edad) VALUES (%s, %s, %s)", (nombre, email, edad))
    conn.commit()
    cursor.close()
    conn.close()
    return jsonify({'message': 'Usuario creado correctamente'}), 201

# Ruta para obtener todos los usuarios (SELECT)
@app.route('/usuarios', methods=['GET'])
def obtener_usuarios():
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM usuarios")
    usuarios = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(usuarios), 200

# Ruta para obtener un usuario por ID (SELECT por ID)
@app.route('/usuarios/<int:id>', methods=['GET'])
def obtener_usuario(id):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM usuarios WHERE id = %s", (id,))
    usuario = cursor.fetchone()
    cursor.close()
    conn.close()
    if usuario:
        return jsonify(usuario), 200
    else:
        return jsonify({'message': 'Usuario no encontrado'}), 404

# Ruta para actualizar un usuario por ID (UPDATE)
@app.route('/usuarios/<int:id>', methods=['PUT'])
def actualizar_usuario(id):
    data = request.json
    nombre = data.get('nombre')
    email = data.get('email')
    edad = data.get('edad')

    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("UPDATE usuarios SET nombre = %s, email = %s, edad = %s WHERE id = %s", (nombre, email, edad, id))
    conn.commit()
    cursor.close()
    conn.close()

    return jsonify({'message': 'Usuario actualizado correctamente'}), 200

# Ruta para eliminar un usuario por ID (DELETE)
@app.route('/usuarios/<int:id>', methods=['DELETE'])
def eliminar_usuario(id):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM usuarios WHERE id = %s", (id,))
    conn.commit()
    cursor.close()
    conn.close()
    return jsonify({'message': 'Usuario eliminado correctamente'}), 200

if __name__ == '__main__':
    app.run(debug=True)

CODIGO DE LA BASE DE DATOS CREADA

CREATE DATABASE mi_base_de_datos;
USE mi_base_de_datos;

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100),
    email VARCHAR(100),
    edad INT
);

